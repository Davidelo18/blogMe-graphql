{"version":3,"sources":["reportWebVitals.js","components/Header.js","components/Post.js","pages/Home.js","App.js","core/ApolloProvider.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Header","className","Post","post","username","body","publishingTime","voteCount","moment","fromNow","FETCH_POSTS","gql","Home","useQuery","loading","data","posts","getPosts","Fragment","map","id","App","exact","path","component","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"8HAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,iFCKCQ,MAVf,WACI,OACI,yBAAQC,UAAU,SAAlB,UACI,qBAAKA,UAAU,eAAf,oBACA,qBAAKA,UAAU,gBACf,wBAAQA,UAAU,wB,iBCcfC,I,EAAAA,EAlBf,YAAwE,IAAD,IAAvDC,KAAQC,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,eAAgBC,EAAe,EAAfA,UACpD,OACI,0BAASN,UAAU,OAAnB,UACI,sBAAKA,UAAU,eAAf,UACI,qBAAKA,UAAU,iBACf,sBAAKA,UAAU,aAAf,UACI,qBAAKA,UAAU,aAAf,SAA6BG,IAC7B,qBAAKH,UAAU,aAAf,SAA6BO,IAAOF,GAAgBG,kBAG5D,qBAAKR,UAAU,aAAf,SAA6BI,IAC7B,qBAAKJ,UAAU,eAAf,SACI,qBAAKA,UAAU,gBAAf,SAAgCM,UCYhD,IAAMG,EAAcC,IAAH,oLAYFC,EAjCf,WAAiB,IAAD,EACwCC,mBAASH,GAArDI,EADI,EACJA,QADI,IACKC,KAAkBC,GADvB,aACiC,GADjC,GACaC,SAEzB,OACI,eAAC,IAAMC,SAAP,WACI,cAAC,EAAD,IACA,sBAAMjB,UAAU,mBAAhB,SACKa,EACG,6DAEAE,GAASA,EAAMG,KAAI,SAAAhB,GAAI,OACnB,cAAC,EAAD,CAAoBA,KAAMA,GAAfA,EAAKiB,aCJzBC,MARf,WACE,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWZ,O,wBCDjCa,EAAWC,YAAe,CAC5BC,IAAK,0BAGHC,EAAS,IAAIC,IAAa,CAC5BC,KAAML,EACNM,MAAO,IAAIC,MAIX,gBAAC,iBAAD,CAAgBJ,OAASA,EAAzB,SACI,cAAC,EAAD,MCdRK,IAASC,OAAOC,EAAgBC,SAASC,eAAe,SAKxD9C,K","file":"static/js/main.93a5ab44.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nfunction Header() {\n    return (\n        <header className=\"header\">\n            <div className=\"header__logo\">blogMe</div>\n            <nav className=\"header__nav\"></nav>\n            <button className=\"header__options\"></button>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport moment from 'moment';\n\nfunction Post({ post: { username, body, publishingTime, voteCount } }) {\n    return (\n        <article className=\"post\">\n            <div className=\"post__header\">\n                <div className=\"post__avatar\"></div>\n                <div className=\"post__info\">\n                    <div className=\"post__user\">{username}</div>\n                    <div className=\"post__date\">{moment(publishingTime).fromNow()}</div>\n                </div>\n            </div>\n            <div className=\"post__body\">{body}</div>\n            <div className=\"post__footer\">\n                <div className=\"post__plusses\">{voteCount}</div>\n            </div>\n        </article>\n    )\n}\n\nexport default Post;","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport Header from '../components/Header';\nimport Post from '../components/Post';\n\nfunction Home() {\n    const { loading, data: { getPosts: posts } = {} } = useQuery(FETCH_POSTS);\n\n    return (\n        <React.Fragment>\n            <Header/>\n            <main className=\"main main--posts\">\n                {loading ? (\n                    <h1>Ładowanie postów...</h1>\n                ) : (\n                    posts && posts.map(post => (\n                        <Post key={post.id} post={post}></Post>\n                    ))\n                )}\n            </main>\n        </React.Fragment>\n    );\n}\n\n//document.getElementsByTagName('body')[0].classList.add('dark');\n\nconst FETCH_POSTS = gql`\n    {\n        getPosts {\n            id\n            username\n            body\n            publishingTime\n            voteCount\n        }\n    }\n`;\n\nexport default Home;\n","import './styles/root.scss';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/\" component={Home}/>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport App from '../App';\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst httpLink = createHttpLink({\n    uri: \"http://localhost:5000\"\n});\n\nconst client = new ApolloClient({\n    link: httpLink,\n    cache: new InMemoryCache()\n});\n\nexport default (\n    <ApolloProvider client={ client }>\n        <App/>\n    </ApolloProvider>\n)","import ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport ApolloProvider from './core/ApolloProvider'\n\nReactDOM.render(ApolloProvider, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}